@use '../tools/mixins/utilities';


@mixin trumps-spacing() {
    /**
    * Spacing Trumps
    * ===================================
    *
    * These can be helpful in situations where you need to apply some spacing and do not wish to create a new class name for an element.
    * The classes generated include spacing for each of our spacing variables in all directions (left.right, top, bottom), including horizontal & vertical, for both padding & margin.
    *
    * The format of the generated classes is `.u-{name}--{modifier}`, modifier is an optional parameter.
    *
    * eg. a subset of the generated classes
    *
    * .u-spacing { margin: spacing(); }
    * .u-spacing--top { margin-top: spacing(); }
    * .u-spacing-a--top { margin-top: spacing(a); }
    * .u-spacing-b--top { margin-top: spacing(b); }
    *
    * .u-pad { padding: spacing(); }
    * .u-pad--top { padding-top: spacing(); }
    * .u-pad-a--top { padding-top: spacing(a); }
    * .u-pad-b--top { padding-top: spacing(b); }
    *
    * This is an optional component within Fozzie.
    * If you'd like to use it in your project you can include it by adding `@include trumps-spacing();` into your SCSS dependencies file.
    */

    //
    // Margin Utilities
    // ==========================================================================

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing') using ($spacingValue) {
        margin: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'top') using ($spacingValue) {
        margin-top: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'bottom') using ($spacingValue) {
        margin-bottom: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'left') using ($spacingValue) {
        margin-left: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'right') using ($spacingValue) {
        margin-right: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'horizontal') using ($spacingValue) {
        margin-left: spacing(#{$spacingValue}) !important;
        margin-right: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'spacing', 'vertical') using ($spacingValue) {
        margin-bottom: spacing(#{$spacingValue}) !important;
        margin-top: spacing(#{$spacingValue}) !important;
    }


    //
    // Padding Utilities
    // ==========================================================================

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad') using ($spacingValue) {
        padding: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'top') using ($spacingValue) {
        padding-top: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'bottom') using ($spacingValue) {
        padding-bottom: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'left') using ($spacingValue) {
        padding-left: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'right') using ($spacingValue) {
        padding-right: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'horizontal') using ($spacingValue) {
        padding-left: spacing(#{$spacingValue}) !important;
        padding-right: spacing(#{$spacingValue}) !important;
    }

    @include utilities.spacing-classes(utilities.$spacing-map, 'pad', 'vertical') using ($spacingValue) {
        padding-bottom: spacing(#{$spacingValue}) !important;
        padding-top: spacing(#{$spacingValue}) !important;
    }
}
